# $Id$ #

# This file is pretty big by default, but don't worry. 
# The only things required are "path" and "update_files". You must also 
# set "url" to point to the correct rules archive for your version of 
# Snort, unless you prefer to specify this on the command line.
# The rest in here is just here to explain all the optional features and 
# give some ideas how they could be used.



################################################
#    General options you may want to change    #
################################################

# Use "url = <url>" to specify the location of the rules archive
# to download. It must begin with http://, https://, ftp://,
# file:// or scp:// and end with .tar.gz.
#
# The location of the official Snort rules you should use depends
# on which Snort version you run. Basically, you should go to
# http://www.snort.org/dl/rules/ and pick the right URL for
# your version of Snort (and remember to update the URL when 
# upgrading Snort in the future).
#
# There are currently three versions of the rules archive.
# We use the one for Snort 2.1.x by default since that is the 
# most recent version of Snort at the time of this writing.
url = http://www.snort.org/dl/rules/snortrules-snapshot-2_1.tar.gz

# If you use Snort 2.0.x (which is deprecated):
# url = http://www.snort.org/dl/rules/snortrules-snapshot-2_0.tar.gz

# Use this one only if you're following snort-CURRENT, i.e. 
# CVS snapshots of Snort.
# url = http://www.snort.org/dl/rules/snortrules-snapshot-CURRENT.tar.gz

# If you prefer to download the rules archive from outside Oinkmaster,
# you can then point to the file on your local filesystem by using
# file://<filename>, for example:
# url = file:///tmp/snortrules.tar.gz

# Example to use scp to copy the rules archive from another host.
# Only OpenSSH is tested. See the FAQ for more information.
# url = scp://user@somehost.example.com:/somedir/snortrules.tar.gz

# If you use -u scp://... and need to specify a private ssh key (passed 
# as -i <key> to the scp command) you can specify it here or add an entry in
# ~/.ssh/config for the Oinkmaster, user as described in the OpenSSH manual. 
# scp_key = /home/oinkmaster/oinkmaster_privkey


# The PATH to use during execution. If you prefer to use external binaries 
# (i.e. use_external_bins=1, see below), tar and gzip must be found, and 
# also wget if downloading via ftp, http or https. All with optional .exe 
# suffix. Assume UNIX style by default:
path = /bin:/usr/bin:/usr/local/bin

# Example if running native Win32 or standalone Cygwin:
# path = c:\oinkmaster;c:\oinkmaster\bin

# Example if running standalone Cygwin and you prefer Cygwin style path:
# path = /cygdrive/c/oinkmaster:/cygdrive/c/oinkmaster/bin



# We normally use external binaries (wget, tar and gzip) since they're 
# already available on most systems and do a good job. If you have the 
# Perl modules Archive::Tar, IO::Zlib and LWP::UserAgent, you can use
# those instead if you like. You can set use_external_bins below to 
# choose which method you prefer. It's set to 0 by default on Win32 
# (i.e. use Perl modules), and 1 on other systems (i.e. use external 
# binaries). The reason for that is that the required Perl modules
# are included on Windows/ActivePerl 5.8.1+, so it's easier to use those
# than to install the ported UNIX tools.
# (Note that if you're using scp to download the archive, external scp 
# binary is still used.) 
# use_external_bins = 0



# Temporary directory to use. This directory must exist when starting
# (Oinkmaster will then create a temporary sub directory in here).
# Keep it as a #comment if you want to use the default.
# The default will be checked for in the environment variables TMP,
# TMPDIR or TEMPDIR, or otherwise use "/tmp" if none of them was set.

# Example for UNIX:
# tmpdir = /home/oinkmaster/tmp/

# Example if running native Win32 or Cygwin:
# tmpdir = c:\tmp

# Example if running Cygwin and you prefer Cygwin style path:
# tmpdir = /cygdrive/c/tmp


# The umask to use during execution if you want it to be something
# else than the current value when starting Oinkmaster
# (keep it commented out to use the current value).
# For example:
# umask = 0027


# Files in the archive matching this regular expression will be 
# checked for changes, and then updated or added if needed.
# You can then choose to skip individual files by specifying
# the "skipfile" keyword below.
# Normally you shouldn't need to change this one.
# (But if you do, make sure it's still a valid regexp.)
update_files = \.rules$|\.config$|\.conf$|\.txt$|\.map$


# Regexp of keywords that starts a snort rule.
# May be useful if you create your own ruletypes and want those
# lines to be regarded as rules as well.
# rule_actions = alert|drop|log|pass|reject|sdrop|activate|dynamic


# If the number of rules files in the downloaded archive matching the
# 'update_files' regexp is below min_files, or if the total number
# of rules in it is below min_rules, the archive is regarded as
# broken and the update is aborted with an error message.
# Both are set to 1 by default (i.e. the archive is only regarded as
# broken if it's totally empty).
# min_files = 1
# min_rules = 1



# You can include other files anywhere in here by using "include <file>".
# <file> will be parsed (just like a regular oinkmaster.conf) as
# soon as the include statement is seen, and then return and continue
# parsing the rest of the original file. If an option is re-defined, it
# will override the previous value. You can use as many "include"
# statements as you wish, and also include even more files from included
# files. Example to load stuff from "foo.conf": 
# include foo.conf



#######################################################################
# Files to totally skip (i.e. never update or check for changes)      #
#                                                                     #
# Syntax: skipfile filename                                           #
# or:     skipfile filename1, filename2, filename3, ...               #
#######################################################################

# Ignore local.rules from the rules archive by default since we might 
# have put some local rules in our own local.rules and we don't want it to 
# get overwritten by the empty one from the archive after each update.
skipfile local.rules

# The file deleted.rules contains rules that have been deleted from other 
# files, so there is usually no point in updating it (although it may be 
# useful to watch for changes in it anyway since it sometimes contains 
# useful comments about *why* certain rules are deleted).
skipfile deleted.rules

# Also skip snort.conf by default since we don't want to overwrite our own 
# snort.conf if we have it in the same directory as the rules. If you 
# have your own production copy of snort.conf in another directory, it may 
# be really nice to check for changes in this file though, especially 
# since variables are sometimes added or modified and new/old files are 
# included/excluded.
skipfile snort.conf

# You may want to consider ignoring threshold.conf for the same reasons as 
# for snort.conf, i.e. if you customize it locally and don't want it to 
# become overwritten by the default one. It may be better to put local 
# thresholding/suppressing in some local file and still update and use 
# the official one though, in case important stuff is added to it some 
# day. We do update it by default, but it's your call.
# skipfile threshold.conf



##########################################################################
# SIDs to modify after each update (only for the skilled/stupid/brave).  #
# Don't use it unless you have to. There is nothing that stops you from  #
# modifying rules in such ways that they become invalid.                 #
# If you just want to disable SIDs, please skip this section and have a  #
# look at the "disablesid" keyword below.                                #
#                                                                        #
# You may specify multiple modifysid directives for the same SID (they   #
# will be processed in order of appearance), and you may also specify a  #
# list of SIDs on which the substitution should be applied.              #
# The wildcard ("*") can be used to apply the substitution on all rules  #
# regardless of the SID.                                                 #
#                                                                        #
# Syntax: modifysid SID "replacethis" | "withthis"                       #
# or:                                                                    #
#         modifysid SID1, SID2, SID3, ... "replacethis" | "withthis"     #
# or:                                                                    #
#         modifysid * "replacethis" | "withthis"                         #
#                                                                        #
# The strings within the quotes will simply be passed to a               #
# s/replacethis/withthis/ statement in Perl, so they must be valid       #
# regular expressions. The strings are case-sensitive and only the first #
# occurrence will be replaced. If there are multiple occurrences you     #
# want replace, simply repeat the same modifysid line.                   #
##########################################################################

# Example to enable a rule (in this case SID 1325) that is disabled by
# default, by simply replacing leading "#alert" with "alert".
# Oinkmaster removes whitespaces next to the leading "#" so you don't
# have to worry about that. (You should really use 'enablesid' for this
# though, which handles multi-line rules as well.)
# modifysid 1325 "^#alert" | "alert"

# You could also do like this to enable it no matter what type of
# rule it is (alert, log, pass, etc).
# modifysid 1325 "^#" | ""

# Example to add "tag" stuff to SID 1325.
# modifysid 1325 "sid:1325;" | "sid:1325; tag: host, src, 300, seconds;"

# Example to make SID 1378 a 'drop' rule (valid if you're running 
# Snort_inline).
# modifysid 1378 "^alert" | "drop"

# Example to replace first occurrence of $EXTERNAL_NET with $HOME_NET in 
# SID 302. Remember that the strings are regular expressions, so you must
# escape special characters like $.
# modifysid 302 "\$EXTERNAL_NET" | "\$HOME_NET"

# You can also specify that a substitution should apply on multiple SIDs.
# modifysid 302,429,1821 "\$EXTERNAL_NET" | "\$HOME_NET"

# You can take advantage of the fact that it's regular expressions and
# do more complex stuff. This example (for Snort_inline) adds a 'replace'
# statement to SID 1324 that replaces "/bin/sh" with "/foo/sh".
# modifysid 1324 "(content\s*:\s*"\/bin\/sh"\s*;)" | "$1 replace:"\/foo\/sh";"

# If you for some reason would like to add a comment inside the actual rules
# file, like the reason why you disabled this rule, you can do like this
# (you would normally add such comments in oinkmaster.conf though).
# modifysid 1324 "(.+)" | "# 20020101: disabled this rule just for fun:\n#$1"

# Here is an example that is actually useful. Let's say you don't care 
# about incoming welchia pings (detected by SID 483 at the time of 
# writing) but you want to know when infected hosts on your network scans 
# hosts on the outside. (Remember that watching for outgoing malicious 
# packets are often just as important as watching for incoming ones, 
# especially in this case.) The rule currently looks like
# "alert icmp $EXTERNAL_NET any -> $HOME_NET any ..."
# but we want to switch that so it becomes
# "alert icmp $HOME_NET any -> $EXTERNAL_NET any ...".
# Here is how it could be done.
# modifysid 483 "(.+) \$EXTERNAL_NET (.+) \$HOME_NET (.+)" | "$1 \$HOME_NET $2 \$EXTERNAL_NET $3"

# The wildcard (modifysid * ...) can be used to do all kinds of interesting 
# things. The substitution expression will be applied on all matching
# rules. First, a silly example to replace "foo" with "bar" in all rules
# (that have the string "foo" in them, that is.) 
# modifysid * "foo" | "bar"

# If you for some reason don't want to use the stream preprocessor to 
# match established streams, you may want to replace the 'flow' statement
# with 'flags:A+;' in all those rules.
# modifysid * "flow:[a-z,_ ]+;" | "flags:A+;"

# Example to convert all rules of classtype attempted-admin to 'drop' 
# rules (for Snort_inline only, obviously).
# modifysid * "^alert (.*classtype:attempted-admin)" | "drop $1"

# This one will append some text to the 'msg' string for all rules that 
# have the 'tag' keyword in them.
# modifysid * "(.*msg:\s*".+?)"(\s*;.+;\s*tag:.*)" | "$1, going to tag this baby"$2"

# There may be times when you want to replace multiple occurrences of a 
# certain keyword/string in a rule and not just the first one. To replace 
# the first two occurrences of "foo" with "bar" in SID 100, simply repeat
# the modifysid statement:
# modifysid 100 "foo" | "bar"
# modifysid 100 "foo" | "bar"
# 
# Or you can even specify a SID list but repeat the same SID as many times
# as required, like:
# modifysid 100,100,100 "foo" | "bar"



########################################################################
# SIDs to enable after each update.                                    #
# Will simply remove all the leading '#' for a specified SID (if it's  #
# a multi-line rule, the leading '#' for all lines are removed.)       #
# These will be processed after all the modifysid and disablesid       #
# statements. Using 'enablesid' on a rule that is not disabled is a    #
# NOOP.                                                                #
#                                                                      #
# Syntax:  enablesid SID                                               #
# or:      enablesid SID1, SID2, SID3, ...                             #
########################################################################

# Example to enable SID 1325:
# enablesid 1325



########################################################################
# SIDs to comment out, i.e. disable, after each update by placing a    #
# '#' in front of the rule (if it's a multi-line rule, it will be put  #
# in front of all lines).                                              #
#                                                                      #
# Syntax:  disablesid SID                                              #
# or:      disablesid SID1, SID2, SID3, ...                            #
########################################################################

# You can specify one SID per line:
# disablesid 1
# disablesid 2
# disablesid 3

# And also as comma-separated lists:
# disablesid 4,5,6

# It's a good idea to also add comment about why you disable the sid:
# disablesid 1324    # 20020101: disabled this SID just because I can
